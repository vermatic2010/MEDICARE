{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\verma\\\\Downloads\\\\Medical Bot\\\\client\\\\src\\\\pages\\\\WellnessChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ChatWindow from \"../components/ChatWindow\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WellnessChat = ({\n  user\n}) => {\n  _s();\n  const [chat, setChat] = useState([{\n    sender: \"bot\",\n    text: \"üåü Welcome to Wellness Chat with AI! Tell me naturally what you want:\\n‚Ä¢ 'My weight is 70kg height 175cm' for BMI\\n‚Ä¢ 'My BP is 120/80' for blood pressure\\n‚Ä¢ 'Nutrition for apple' for food info (üìä RAG-enhanced!)\\n‚Ä¢ 'Yoga for back pain' for exercises\"\n  }]);\n  const [bmiStep, setBmiStep] = useState(0);\n  const [bpStep, setBpStep] = useState(0);\n  const [weight, setWeight] = useState(null);\n  const [unitSystem, setUnitSystem] = useState(\"metric\");\n  const [pendingTopic, setPendingTopic] = useState(null);\n  const buttons = [{\n    label: \"‚öñÔ∏è BMI\",\n    type: \"bmi\"\n  }, {\n    label: \"üçé Food Nutrition\",\n    type: \"food\"\n  }, {\n    label: \"üßò Yoga\",\n    type: \"yoga\"\n  }, {\n    label: \"ü©∫ BP Checker\",\n    type: \"bp\"\n  }];\n\n  // Comprehensive Gemini AI-powered intent detection and entity extraction for wellness workflows\n  const geminiParseWellnessInput = async input => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/ai-response\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          type: \"wellness-intent-extraction\",\n          userInput: input\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const cleanResponse = data.response.replace(/```json|```/g, '').trim();\n        try {\n          return JSON.parse(cleanResponse);\n        } catch (parseError) {\n          console.log(\"Failed to parse Gemini wellness response:\", parseError);\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Gemini wellness parsing failed:\", error);\n    }\n    return null;\n  };\n  const handleUserInput = async input => {\n    // Always show user message in chat\n    if (typeof input === \"string\") {\n      setChat(prev => [...prev, {\n        sender: \"user\",\n        text: input\n      }]);\n    }\n\n    // Handle text input (natural language) for step-based flows FIRST\n    if (typeof input === \"string\") {\n      // BMI flow (local only)\n      if (bmiStep === \"choose_unit\") {\n        const u = input.toLowerCase();\n        if (u === \"kg\" || u === \"metric\") {\n          setUnitSystem(\"metric\");\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Enter your weight in kg:\"\n          }]);\n          setBmiStep(1);\n        } else if (u === \"lbs\" || u === \"imperial\") {\n          setUnitSystem(\"imperial\");\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Enter your weight in lbs:\"\n          }]);\n          setBmiStep(1);\n        } else {\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"‚ùó Please type `kg` or `lbs`.\"\n          }]);\n        }\n        return;\n      }\n      if (bmiStep === 1) {\n        const w = parseFloat(input);\n        if (isNaN(w) || w <= 0) {\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"‚ùó Please enter a valid weight.\"\n          }]);\n        } else {\n          setWeight(w);\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: `Got it. Now enter your height in ${unitSystem === \"metric\" ? \"cm\" : \"inches\"}:`\n          }]);\n          setBmiStep(2);\n        }\n        return;\n      }\n      if (bmiStep === 2) {\n        const h = parseFloat(input);\n        if (isNaN(h) || h <= 0) {\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"‚ùó Please enter a valid height.\"\n          }]);\n        } else {\n          const bmi = calculateBMI(weight, h, unitSystem);\n          const bmiResult = analyzeBMI(bmi);\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}`\n          }]);\n\n          // Check if consultation is needed and redirect\n          if (bmiResult.needsConsultation) {\n            setTimeout(() => {\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\"\n              }]);\n              // Redirect to Smart Triage after 2 seconds\n              setTimeout(() => {\n                if (onNavigate) {\n                  onNavigate('triage');\n                }\n              }, 2000);\n            }, 1000);\n          }\n          setBmiStep(0);\n          setWeight(null);\n        }\n        return;\n      }\n\n      // BP flow (local only)\n      if (bpStep === 1) {\n        const match = input.match(/^(\\d{2,3})\\s*\\/\\s*(\\d{2,3})$/);\n        if (!match) {\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"‚ùì Please enter as `systolic/diastolic` (e.g., 120/80)\"\n          }]);\n        } else {\n          const [_, systolic, diastolic] = match;\n          const bpResult = analyzeBP(+systolic, +diastolic);\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}`\n          }]);\n\n          // Check if consultation is needed and redirect\n          if (bpResult.needsConsultation) {\n            setTimeout(() => {\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\"\n              }]);\n              // Redirect to Smart Triage after 2 seconds\n              setTimeout(() => {\n                if (onNavigate) {\n                  onNavigate('triage');\n                }\n              }, 2000);\n            }, 1000);\n          }\n          setBpStep(0);\n        }\n        return;\n      }\n\n      // Gemini API for Food Nutrition, Yoga only (button flows) - CHECK THIS FIRST\n      if (pendingTopic === \"food\" || pendingTopic === \"yoga\") {\n        try {\n          const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              type: pendingTopic,\n              userInput: input\n            })\n          });\n          const data = await res.json();\n\n          // Format response for RAG-enhanced nutrition\n          let responseText = data.response || `No ${pendingTopic} info found.`;\n          if (pendingTopic === \"food\" && data.ragEnhanced) {\n            responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\n            if (data.relevantContext && data.relevantContext.length > 0) {\n              const similarFoods = data.relevantContext.filter(ctx => ctx.category && ctx.category !== 'unknown').map(ctx => ctx.category).filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\n              .slice(0, 3);\n              if (similarFoods.length > 0) {\n                responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\n              }\n            }\n          } else if (pendingTopic === \"food\" && data.fallback) {\n            responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\n          }\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: responseText\n          }]);\n        } catch (err) {\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: \"‚ö†Ô∏è Something went wrong. Please try again.\"\n          }]);\n        }\n        setPendingTopic(null);\n        return;\n      }\n    }\n\n    // Gemini AI-powered intent detection and entity extraction for free text (SECONDARY)\n    if (typeof input === \"string\") {\n      // Simple pattern matching fallback for common cases\n      const lowerInput = input.toLowerCase();\n\n      // BMI calculation patterns\n      const bmiPatterns = [/(?:my\\s+)?weight\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*kg.*?height\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*cm/i, /(?:my\\s+)?height\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*cm.*?weight\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*kg/i, /(\\d+(?:\\.\\d+)?)\\s*kg.*?(\\d+(?:\\.\\d+)?)\\s*cm/i, /(\\d+(?:\\.\\d+)?)\\s*cm.*?(\\d+(?:\\.\\d+)?)\\s*kg/i];\n      for (const pattern of bmiPatterns) {\n        const match = input.match(pattern);\n        if (match) {\n          let weight, height;\n\n          // Check if weight comes first or height comes first in the pattern\n          if (pattern.source.includes('weight.*height')) {\n            weight = parseFloat(match[1]);\n            height = parseFloat(match[2]);\n          } else if (pattern.source.includes('height.*weight')) {\n            height = parseFloat(match[1]);\n            weight = parseFloat(match[2]);\n          } else {\n            // For simple patterns like kg...cm or cm...kg, check the units\n            if (input.includes('kg') && input.includes('cm')) {\n              const kgIndex = input.indexOf('kg');\n              const cmIndex = input.indexOf('cm');\n              if (kgIndex < cmIndex) {\n                // kg comes first, so match[1] is weight, match[2] is height\n                weight = parseFloat(match[1]);\n                height = parseFloat(match[2]);\n              } else {\n                // cm comes first, so match[1] is height, match[2] is weight\n                height = parseFloat(match[1]);\n                weight = parseFloat(match[2]);\n              }\n            }\n          }\n          if (weight > 0 && height > 0) {\n            const bmi = calculateBMI(weight, height, \"metric\");\n            const bmiResult = analyzeBMI(bmi);\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}`\n            }]);\n\n            // Check if consultation is needed and redirect\n            if (bmiResult.needsConsultation) {\n              setTimeout(() => {\n                setChat(prev => [...prev, {\n                  sender: \"bot\",\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\"\n                }]);\n                // Redirect to Smart Triage after 2 seconds\n                setTimeout(() => {\n                  if (onNavigate) {\n                    onNavigate('triage');\n                  }\n                }, 2000);\n              }, 1000);\n            }\n            return;\n          }\n        }\n      }\n\n      // Blood pressure patterns\n      const bpPatterns = [/(?:my\\s+)?(?:bp|blood\\s+pressure)\\s+(?:is\\s+)?(\\d{2,3})\\s*\\/\\s*(\\d{2,3})/i, /(\\d{2,3})\\s+over\\s+(\\d{2,3})/i, /(\\d{2,3})\\s*\\/\\s*(\\d{2,3})/i];\n      for (const pattern of bpPatterns) {\n        const match = input.match(pattern);\n        if (match) {\n          const systolic = parseInt(match[1]);\n          const diastolic = parseInt(match[2]);\n          if (systolic >= 70 && systolic <= 250 && diastolic >= 40 && diastolic <= 150) {\n            const bpResult = analyzeBP(systolic, diastolic);\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}`\n            }]);\n\n            // Check if consultation is needed and redirect\n            if (bpResult.needsConsultation) {\n              setTimeout(() => {\n                setChat(prev => [...prev, {\n                  sender: \"bot\",\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\"\n                }]);\n                // Redirect to Smart Triage after 2 seconds\n                setTimeout(() => {\n                  if (onNavigate) {\n                    onNavigate('triage');\n                  }\n                }, 2000);\n              }, 1000);\n            }\n            return;\n          }\n        }\n      }\n\n      // Food nutrition patterns\n      const foodPatterns = [/nutrition\\s+(?:of|for|info|list)\\s+(.+)/i, /(.+)\\s+nutrition/i, /calories?\\s+(?:in|of|for)\\s+(.+)/i, /(?:what|how)\\s+(?:about|much)\\s+(.+)/i];\n      for (const pattern of foodPatterns) {\n        const match = input.match(pattern);\n        if (match) {\n          const foodItem = match[1].trim();\n          if (foodItem && foodItem.length > 0) {\n            try {\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  type: \"food\",\n                  userInput: foodItem\n                })\n              });\n              const data = await res.json();\n\n              // Format response with RAG information\n              let responseText = data.response || `No nutrition info found for \"${foodItem}\".`;\n              if (data.ragEnhanced) {\n                responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\n                if (data.relevantContext && data.relevantContext.length > 0) {\n                  const similarFoods = data.relevantContext.filter(ctx => ctx.category && ctx.category !== 'unknown').map(ctx => ctx.category).filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\n                  .slice(0, 3);\n                  if (similarFoods.length > 0) {\n                    responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\n                  }\n                }\n              } else if (data.fallback) {\n                responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\n              }\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: responseText\n              }]);\n              return;\n            } catch (err) {\n              console.error(\"Food API error:\", err);\n              // Continue to Gemini parsing\n            }\n          }\n        }\n      }\n\n      // Yoga patterns\n      if (/yoga|exercise|stretc|workout/i.test(lowerInput)) {\n        try {\n          const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              type: \"yoga\",\n              userInput: input\n            })\n          });\n          const data = await res.json();\n          setChat(prev => [...prev, {\n            sender: \"bot\",\n            text: data.response || \"No yoga advice found.\"\n          }]);\n          return;\n        } catch (err) {\n          console.error(\"Yoga API error:\", err);\n          // Continue to Gemini parsing\n        }\n      }\n\n      // AQI patterns  \n      if (/(?:aqi|air quality|pollution|smog)\\s+(?:in|of|for)\\s+(.+)/i.test(lowerInput)) {\n        const cityMatch = input.match(/(?:aqi|air quality|pollution|smog)\\s+(?:in|of|for)\\s+(.+)/i);\n        if (cityMatch) {\n          const city = cityMatch[1].trim();\n          try {\n            const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                type: \"aqi\",\n                userInput: city\n              })\n            });\n            const data = await res.json();\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: data.response || `No AQI info found for \"${city}\".`\n            }]);\n            return;\n          } catch (err) {\n            console.error(\"AQI API error:\", err);\n            // Continue to Gemini parsing\n          }\n        }\n      }\n\n      // Try Gemini parsing for more complex cases\n      const geminiResult = await geminiParseWellnessInput(input);\n      if (geminiResult) {\n        const {\n          intent,\n          weight: geminiWeight,\n          height: geminiHeight,\n          unit,\n          systolic,\n          diastolic,\n          food_item,\n          goal,\n          city\n        } = geminiResult;\n\n        // --- BMI with Gemini entity extraction ---\n        if (intent === \"bmi\") {\n          if (geminiWeight && geminiHeight) {\n            const bmi = calculateBMI(geminiWeight, geminiHeight, unit || \"metric\");\n            const bmiResult = analyzeBMI(bmi);\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}`\n            }]);\n\n            // Check if consultation is needed and redirect\n            if (bmiResult.needsConsultation) {\n              setTimeout(() => {\n                setChat(prev => [...prev, {\n                  sender: \"bot\",\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\"\n                }]);\n                // Redirect to Smart Triage after 2 seconds\n                setTimeout(() => {\n                  if (onNavigate) {\n                    onNavigate('triage');\n                  }\n                }, 2000);\n              }, 1000);\n            }\n            return;\n          } else {\n            await handleUserInput({\n              type: \"bmi\"\n            });\n            return;\n          }\n        }\n\n        // --- BP with Gemini entity extraction ---\n        if (intent === \"bp\") {\n          if (systolic && diastolic) {\n            const bpResult = analyzeBP(systolic, diastolic);\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}`\n            }]);\n\n            // Check if consultation is needed and redirect\n            if (bpResult.needsConsultation) {\n              setTimeout(() => {\n                setChat(prev => [...prev, {\n                  sender: \"bot\",\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\"\n                }]);\n                // Redirect to Smart Triage after 2 seconds\n                setTimeout(() => {\n                  if (onNavigate) {\n                    onNavigate('triage');\n                  }\n                }, 2000);\n              }, 1000);\n            }\n            return;\n          } else {\n            await handleUserInput({\n              type: \"bp\"\n            });\n            return;\n          }\n        }\n\n        // --- Food with Gemini entity extraction ---\n        if (intent === \"food\") {\n          if (food_item) {\n            try {\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  type: \"food\",\n                  userInput: food_item\n                })\n              });\n              const data = await res.json();\n\n              // Format response with RAG information\n              let responseText = data.response || `No nutrition info found for \"${food_item}\".`;\n              if (data.ragEnhanced) {\n                responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\n                if (data.relevantContext && data.relevantContext.length > 0) {\n                  const similarFoods = data.relevantContext.filter(ctx => ctx.category && ctx.category !== 'unknown').map(ctx => ctx.category).filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\n                  .slice(0, 3);\n                  if (similarFoods.length > 0) {\n                    responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\n                  }\n                }\n              } else if (data.fallback) {\n                responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\n              }\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: responseText\n              }]);\n            } catch (err) {\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: \"‚ö†Ô∏è Something went wrong. Please try again.\"\n              }]);\n            }\n            return;\n          } else {\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: \"üçé Enter a food item to get nutritional info:\"\n            }]);\n            return;\n          }\n        }\n\n        // --- Yoga with Gemini entity extraction ---\n        if (intent === \"yoga\") {\n          if (goal) {\n            try {\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  type: \"yoga\",\n                  userInput: goal\n                })\n              });\n              const data = await res.json();\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: data.response || `No yoga advice found for \"${goal}\".`\n              }]);\n            } catch (err) {\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: \"‚ö†Ô∏è Something went wrong. Please try again.\"\n              }]);\n            }\n            return;\n          } else {\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: \"üßò Type your health goal (e.g., Yoga for back pain):\"\n            }]);\n            return;\n          }\n        }\n\n        // --- AQI with Gemini entity extraction ---\n        if (intent === \"aqi\") {\n          if (city) {\n            try {\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  type: \"aqi\",\n                  userInput: city\n                })\n              });\n              const data = await res.json();\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: data.response || `No AQI info found for \"${city}\".`\n              }]);\n            } catch (err) {\n              setChat(prev => [...prev, {\n                sender: \"bot\",\n                text: \"‚ö†Ô∏è Something went wrong. Please try again.\"\n              }]);\n            }\n            return;\n          } else {\n            setChat(prev => [...prev, {\n              sender: \"bot\",\n              text: \"üå´Ô∏è Enter a city to check AQI:\"\n            }]);\n            return;\n          }\n        }\n      }\n\n      // Fallback for unknown or unparsed intent\n      setChat(prev => [...prev, {\n        sender: \"bot\",\n        text: \"ü§î I'm not sure if I understand this. Please try typing something like 'my weight is 70kg height 175cm', 'my BP is 120/80', 'nutrition for apple', 'yoga for back pain', or 'AQI in Delhi'.\"\n      }]);\n      return;\n    }\n\n    // Button click handling (always works)\n    if (typeof input === \"object\" && input.type) {\n      setBmiStep(0);\n      setBpStep(0);\n      setWeight(null);\n      setPendingTopic(null);\n      if (input.type === \"bmi\") {\n        setChat(prev => [...prev, {\n          sender: \"user\",\n          text: \"You chose BMI\"\n        }, {\n          sender: \"bot\",\n          text: \"Which units?\\n‚Ä¢ Type `kg` for kilograms/cm\\n‚Ä¢ Type `lbs` for pounds/inches\"\n        }]);\n        setBmiStep(\"choose_unit\");\n        return;\n      }\n      if (input.type === \"bp\") {\n        setChat(prev => [...prev, {\n          sender: \"user\",\n          text: \"You chose BP Checker\"\n        }, {\n          sender: \"bot\",\n          text: \"Please enter your blood pressure as `systolic/diastolic` (e.g., 120/80)\"\n        }]);\n        setBpStep(1);\n        return;\n      }\n      if (input.type === \"food\") {\n        setChat(prev => [...prev, {\n          sender: \"user\",\n          text: \"You chose Food Nutrition\"\n        }, {\n          sender: \"bot\",\n          text: \"üçé Enter a food item to get nutritional info:\"\n        }]);\n        setPendingTopic(\"food\");\n        return;\n      }\n      if (input.type === \"yoga\") {\n        setChat(prev => [...prev, {\n          sender: \"user\",\n          text: \"You chose Yoga\"\n        }, {\n          sender: \"bot\",\n          text: \"üßò Type your health goal (e.g., Yoga for back pain):\"\n        }]);\n        setPendingTopic(\"yoga\");\n        return;\n      }\n      if (input.type === \"aqi\") {\n        setChat(prev => [...prev, {\n          sender: \"user\",\n          text: \"You chose AQI\"\n        }, {\n          sender: \"bot\",\n          text: \"üå´Ô∏è Enter a city to check AQI:\"\n        }]);\n        setPendingTopic(\"aqi\");\n        return;\n      }\n    }\n\n    // Fallback for unrecognized text input\n    if (typeof input === \"string\") {\n      setChat(prev => [...prev, {\n        sender: \"bot\",\n        text: \"ü§î I'm not sure if I understand this. Please choose one of the buttons below to continue.\"\n      }]);\n    }\n  };\n  const calculateBMI = (weight, height, units) => {\n    if (units === \"metric\") {\n      return weight / (height / 100) ** 2;\n    } else {\n      return weight / height ** 2 * 703;\n    }\n  };\n  const analyzeBMI = bmi => {\n    if (bmi < 18.5) {\n      return {\n        analysis: `**Underweight**\\nRisks: Nutritional issues, bone loss\\nAdvice: Eat more protein & carbs, do resistance training.`,\n        needsConsultation: false\n      };\n    } else if (bmi < 25) {\n      return {\n        analysis: `**Normal**\\nHealthy range.\\nAdvice: Maintain diet & activity.`,\n        needsConsultation: false\n      };\n    } else if (bmi < 30) {\n      return {\n        analysis: `**Overweight**\\nRisks: Diabetes, heart disease\\nAdvice: Calorie control, cardio exercise.`,\n        needsConsultation: false\n      };\n    } else {\n      return {\n        analysis: `**Obese**\\nRisks: Stroke, diabetes\\nAdvice: Seek medical guidance, structured weight-loss.\\n\\nüö® **Your BMI indicates obesity. We recommend consulting a doctor immediately.**`,\n        needsConsultation: true\n      };\n    }\n  };\n  const analyzeBP = (sys, dia) => {\n    let category,\n      risks,\n      advice,\n      needsConsultation = false;\n    if (sys < 120 && dia < 80) {\n      category = \"Normal\";\n      risks = [\"Low risk of cardiovascular issues\"];\n      advice = [\"Keep up your healthy habits\"];\n    } else if (sys < 130 && dia < 80) {\n      category = \"Elevated\";\n      risks = [\"Risk of developing hypertension\"];\n      advice = [\"Reduce salt\", \"Exercise regularly\"];\n    } else if (sys < 140 || dia < 90) {\n      category = \"Hypertension Stage 1\";\n      risks = [\"Heart disease\", \"Kidney strain\"];\n      advice = [\"Limit alcohol\", \"Monitor BP\", \"Consult doctor\"];\n    } else if (sys < 180 && dia < 120) {\n      category = \"Stage 2 Hypertension\";\n      risks = [\"Organ damage\", \"Stroke\"];\n      advice = [\"Medication likely\", \"Medical supervision\"];\n      needsConsultation = true;\n    } else {\n      category = \"Hypertensive Crisis\";\n      risks = [\"Emergency: stroke/heart failure\"];\n      advice = [\"Seek immediate medical help\"];\n      needsConsultation = true;\n    }\n    if (needsConsultation) {\n      advice.push(\"üö® **Your blood pressure is in a dangerous range. We recommend consulting a doctor immediately.**\");\n    }\n    return {\n      category,\n      risks,\n      advice,\n      needsConsultation\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-3xl mx-auto flex flex-col h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Wellness Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-auto border rounded-md p-3 bg-gray-50 shadow-inner\",\n      children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: chat,\n        buttons: buttons,\n        onUserInput: handleUserInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 779,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 777,\n    columnNumber: 5\n  }, this);\n};\n_s(WellnessChat, \"1s0U9e1WH/t1CHf9fCU5hfSK7XY=\");\n_c = WellnessChat;\nexport default WellnessChat;\nvar _c;\n$RefreshReg$(_c, \"WellnessChat\");","map":{"version":3,"names":["React","useState","ChatWindow","axios","jsxDEV","_jsxDEV","WellnessChat","user","_s","chat","setChat","sender","text","bmiStep","setBmiStep","bpStep","setBpStep","weight","setWeight","unitSystem","setUnitSystem","pendingTopic","setPendingTopic","buttons","label","type","geminiParseWellnessInput","input","response","fetch","method","headers","body","JSON","stringify","userInput","ok","data","json","cleanResponse","replace","trim","parse","parseError","console","log","error","handleUserInput","prev","u","toLowerCase","w","parseFloat","isNaN","h","bmi","calculateBMI","bmiResult","analyzeBMI","toFixed","analysis","needsConsultation","setTimeout","onNavigate","match","_","systolic","diastolic","bpResult","analyzeBP","category","risks","join","advice","res","responseText","ragEnhanced","contextUsed","relevantContext","length","similarFoods","filter","ctx","map","cat","index","arr","indexOf","slice","fallback","err","lowerInput","bmiPatterns","pattern","height","source","includes","kgIndex","cmIndex","bpPatterns","parseInt","foodPatterns","foodItem","test","cityMatch","city","geminiResult","intent","geminiWeight","geminiHeight","unit","food_item","goal","units","sys","dia","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","messages","onUserInput","_c","$RefreshReg$"],"sources":["C:/Users/verma/Downloads/Medical Bot/client/src/pages/WellnessChat.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ChatWindow from \"../components/ChatWindow\";\r\nimport axios from \"axios\";\r\n\r\nconst WellnessChat = ({ user }) => {\r\n  const [chat, setChat] = useState([\r\n    {\r\n      sender: \"bot\",\r\n      text: \"üåü Welcome to Wellness Chat with AI! Tell me naturally what you want:\\n‚Ä¢ 'My weight is 70kg height 175cm' for BMI\\n‚Ä¢ 'My BP is 120/80' for blood pressure\\n‚Ä¢ 'Nutrition for apple' for food info (üìä RAG-enhanced!)\\n‚Ä¢ 'Yoga for back pain' for exercises\",\r\n    },\r\n  ]);\r\n  const [bmiStep, setBmiStep] = useState(0);\r\n  const [bpStep, setBpStep] = useState(0);\r\n  const [weight, setWeight] = useState(null);\r\n  const [unitSystem, setUnitSystem] = useState(\"metric\");\r\n  const [pendingTopic, setPendingTopic] = useState(null);\r\n\r\n  const buttons = [\r\n    { label: \"‚öñÔ∏è BMI\", type: \"bmi\" },\r\n    { label: \"üçé Food Nutrition\", type: \"food\" },\r\n    { label: \"üßò Yoga\", type: \"yoga\" },\r\n    { label: \"ü©∫ BP Checker\", type: \"bp\" },\r\n  ];\r\n\r\n  // Comprehensive Gemini AI-powered intent detection and entity extraction for wellness workflows\r\n  const geminiParseWellnessInput = async (input) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          type: \"wellness-intent-extraction\",\r\n          userInput: input\r\n        }),\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const cleanResponse = data.response.replace(/```json|```/g, '').trim();\r\n        \r\n        try {\r\n          return JSON.parse(cleanResponse);\r\n        } catch (parseError) {\r\n          console.log(\"Failed to parse Gemini wellness response:\", parseError);\r\n          return null;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Gemini wellness parsing failed:\", error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleUserInput = async (input) => {\r\n    // Always show user message in chat\r\n    if (typeof input === \"string\") {\r\n      setChat((prev) => [...prev, { sender: \"user\", text: input }]);\r\n    }\r\n\r\n    // Handle text input (natural language) for step-based flows FIRST\r\n    if (typeof input === \"string\") {\r\n      // BMI flow (local only)\r\n      if (bmiStep === \"choose_unit\") {\r\n        const u = input.toLowerCase();\r\n        if (u === \"kg\" || u === \"metric\") {\r\n          setUnitSystem(\"metric\");\r\n          setChat((prev) => [...prev, { sender: \"bot\", text: \"Enter your weight in kg:\" }]);\r\n          setBmiStep(1);\r\n        } else if (u === \"lbs\" || u === \"imperial\") {\r\n          setUnitSystem(\"imperial\");\r\n          setChat((prev) => [...prev, { sender: \"bot\", text: \"Enter your weight in lbs:\" }]);\r\n          setBmiStep(1);\r\n        } else {\r\n          setChat((prev) => [...prev, { sender: \"bot\", text: \"‚ùó Please type `kg` or `lbs`.\" }]);\r\n        }\r\n        return;\r\n      }\r\n      if (bmiStep === 1) {\r\n        const w = parseFloat(input);\r\n        if (isNaN(w) || w <= 0) {\r\n          setChat((prev) => [...prev, { sender: \"bot\", text: \"‚ùó Please enter a valid weight.\" }]);\r\n        } else {\r\n          setWeight(w);\r\n          setChat((prev) => [\r\n            ...prev,\r\n            {\r\n              sender: \"bot\",\r\n              text: `Got it. Now enter your height in ${unitSystem === \"metric\" ? \"cm\" : \"inches\"}:`,\r\n            },\r\n          ]);\r\n          setBmiStep(2);\r\n        }\r\n        return;\r\n      }\r\n      if (bmiStep === 2) {\r\n        const h = parseFloat(input);\r\n        if (isNaN(h) || h <= 0) {\r\n          setChat((prev) => [...prev, { sender: \"bot\", text: \"‚ùó Please enter a valid height.\" }]);\r\n        } else {\r\n          const bmi = calculateBMI(weight, h, unitSystem);\r\n          const bmiResult = analyzeBMI(bmi);\r\n          setChat((prev) => [\r\n            ...prev, \r\n            { sender: \"bot\", text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}` },\r\n          ]);\r\n          \r\n          // Check if consultation is needed and redirect\r\n          if (bmiResult.needsConsultation) {\r\n            setTimeout(() => {\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { \r\n                  sender: \"bot\", \r\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\" \r\n                },\r\n              ]);\r\n              // Redirect to Smart Triage after 2 seconds\r\n              setTimeout(() => {\r\n                if (onNavigate) {\r\n                  onNavigate('triage');\r\n                }\r\n              }, 2000);\r\n            }, 1000);\r\n          }\r\n          \r\n          setBmiStep(0);\r\n          setWeight(null);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // BP flow (local only)\r\n      if (bpStep === 1) {\r\n        const match = input.match(/^(\\d{2,3})\\s*\\/\\s*(\\d{2,3})$/);\r\n        if (!match) {\r\n          setChat((prev) => [\r\n            ...prev,\r\n            { sender: \"bot\", text: \"‚ùì Please enter as `systolic/diastolic` (e.g., 120/80)\" },\r\n          ]);\r\n        } else {\r\n          const [_, systolic, diastolic] = match;\r\n          const bpResult = analyzeBP(+systolic, +diastolic);\r\n          setChat((prev) => [\r\n            ...prev,\r\n            {\r\n              sender: \"bot\",\r\n              text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}`,\r\n            },\r\n          ]);\r\n          \r\n          // Check if consultation is needed and redirect\r\n          if (bpResult.needsConsultation) {\r\n            setTimeout(() => {\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { \r\n                  sender: \"bot\", \r\n                  text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\" \r\n                },\r\n              ]);\r\n              // Redirect to Smart Triage after 2 seconds\r\n              setTimeout(() => {\r\n                if (onNavigate) {\r\n                  onNavigate('triage');\r\n                }\r\n              }, 2000);\r\n            }, 1000);\r\n          }\r\n          \r\n          setBpStep(0);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Gemini API for Food Nutrition, Yoga only (button flows) - CHECK THIS FIRST\r\n      if (pendingTopic === \"food\" || pendingTopic === \"yoga\") {\r\n        try {\r\n          const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              type: pendingTopic,\r\n              userInput: input,\r\n            }),\r\n          });\r\n          const data = await res.json();\r\n          \r\n          // Format response for RAG-enhanced nutrition\r\n          let responseText = data.response || `No ${pendingTopic} info found.`;\r\n          \r\n          if (pendingTopic === \"food\" && data.ragEnhanced) {\r\n            responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\r\n            if (data.relevantContext && data.relevantContext.length > 0) {\r\n              const similarFoods = data.relevantContext\r\n                .filter(ctx => ctx.category && ctx.category !== 'unknown')\r\n                .map(ctx => ctx.category)\r\n                .filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\r\n                .slice(0, 3);\r\n              \r\n              if (similarFoods.length > 0) {\r\n                responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\r\n              }\r\n            }\r\n          } else if (pendingTopic === \"food\" && data.fallback) {\r\n            responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\r\n          }\r\n          \r\n          setChat((prev) => [...prev, { sender: \"bot\", text: responseText }]);\r\n        } catch (err) {\r\n          setChat((prev) => [\r\n            ...prev,\r\n            { sender: \"bot\", text: \"‚ö†Ô∏è Something went wrong. Please try again.\" },\r\n          ]);\r\n        }\r\n        setPendingTopic(null);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Gemini AI-powered intent detection and entity extraction for free text (SECONDARY)\r\n    if (typeof input === \"string\") {\r\n      // Simple pattern matching fallback for common cases\r\n      const lowerInput = input.toLowerCase();\r\n      \r\n      // BMI calculation patterns\r\n      const bmiPatterns = [\r\n        /(?:my\\s+)?weight\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*kg.*?height\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*cm/i,\r\n        /(?:my\\s+)?height\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*cm.*?weight\\s+(?:is\\s+)?(\\d+(?:\\.\\d+)?)\\s*kg/i,\r\n        /(\\d+(?:\\.\\d+)?)\\s*kg.*?(\\d+(?:\\.\\d+)?)\\s*cm/i,\r\n        /(\\d+(?:\\.\\d+)?)\\s*cm.*?(\\d+(?:\\.\\d+)?)\\s*kg/i\r\n      ];\r\n      \r\n      for (const pattern of bmiPatterns) {\r\n        const match = input.match(pattern);\r\n        if (match) {\r\n          let weight, height;\r\n          \r\n          // Check if weight comes first or height comes first in the pattern\r\n          if (pattern.source.includes('weight.*height')) {\r\n            weight = parseFloat(match[1]);\r\n            height = parseFloat(match[2]);\r\n          } else if (pattern.source.includes('height.*weight')) {\r\n            height = parseFloat(match[1]);\r\n            weight = parseFloat(match[2]);\r\n          } else {\r\n            // For simple patterns like kg...cm or cm...kg, check the units\r\n            if (input.includes('kg') && input.includes('cm')) {\r\n              const kgIndex = input.indexOf('kg');\r\n              const cmIndex = input.indexOf('cm');\r\n              if (kgIndex < cmIndex) {\r\n                // kg comes first, so match[1] is weight, match[2] is height\r\n                weight = parseFloat(match[1]);\r\n                height = parseFloat(match[2]);\r\n              } else {\r\n                // cm comes first, so match[1] is height, match[2] is weight\r\n                height = parseFloat(match[1]);\r\n                weight = parseFloat(match[2]);\r\n              }\r\n            }\r\n          }\r\n          \r\n          if (weight > 0 && height > 0) {\r\n            const bmi = calculateBMI(weight, height, \"metric\");\r\n            const bmiResult = analyzeBMI(bmi);\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}` },\r\n            ]);\r\n            \r\n            // Check if consultation is needed and redirect\r\n            if (bmiResult.needsConsultation) {\r\n              setTimeout(() => {\r\n                setChat((prev) => [\r\n                  ...prev,\r\n                  { \r\n                    sender: \"bot\", \r\n                    text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\" \r\n                  },\r\n                ]);\r\n                // Redirect to Smart Triage after 2 seconds\r\n                setTimeout(() => {\r\n                  if (onNavigate) {\r\n                    onNavigate('triage');\r\n                  }\r\n                }, 2000);\r\n              }, 1000);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Blood pressure patterns\r\n      const bpPatterns = [\r\n        /(?:my\\s+)?(?:bp|blood\\s+pressure)\\s+(?:is\\s+)?(\\d{2,3})\\s*\\/\\s*(\\d{2,3})/i,\r\n        /(\\d{2,3})\\s+over\\s+(\\d{2,3})/i,\r\n        /(\\d{2,3})\\s*\\/\\s*(\\d{2,3})/i\r\n      ];\r\n      \r\n      for (const pattern of bpPatterns) {\r\n        const match = input.match(pattern);\r\n        if (match) {\r\n          const systolic = parseInt(match[1]);\r\n          const diastolic = parseInt(match[2]);\r\n          \r\n          if (systolic >= 70 && systolic <= 250 && diastolic >= 40 && diastolic <= 150) {\r\n            const bpResult = analyzeBP(systolic, diastolic);\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { \r\n                sender: \"bot\", \r\n                text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}` \r\n              },\r\n            ]);\r\n            \r\n            // Check if consultation is needed and redirect\r\n            if (bpResult.needsConsultation) {\r\n              setTimeout(() => {\r\n                setChat((prev) => [\r\n                  ...prev,\r\n                  { \r\n                    sender: \"bot\", \r\n                    text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\" \r\n                  },\r\n                ]);\r\n                // Redirect to Smart Triage after 2 seconds\r\n                setTimeout(() => {\r\n                  if (onNavigate) {\r\n                    onNavigate('triage');\r\n                  }\r\n                }, 2000);\r\n              }, 1000);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Food nutrition patterns\r\n      const foodPatterns = [\r\n        /nutrition\\s+(?:of|for|info|list)\\s+(.+)/i,\r\n        /(.+)\\s+nutrition/i,\r\n        /calories?\\s+(?:in|of|for)\\s+(.+)/i,\r\n        /(?:what|how)\\s+(?:about|much)\\s+(.+)/i\r\n      ];\r\n      \r\n      for (const pattern of foodPatterns) {\r\n        const match = input.match(pattern);\r\n        if (match) {\r\n          const foodItem = match[1].trim();\r\n          if (foodItem && foodItem.length > 0) {\r\n            try {\r\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ type: \"food\", userInput: foodItem }),\r\n              });\r\n              const data = await res.json();\r\n              \r\n              // Format response with RAG information\r\n              let responseText = data.response || `No nutrition info found for \"${foodItem}\".`;\r\n              \r\n              if (data.ragEnhanced) {\r\n                responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\r\n                if (data.relevantContext && data.relevantContext.length > 0) {\r\n                  const similarFoods = data.relevantContext\r\n                    .filter(ctx => ctx.category && ctx.category !== 'unknown')\r\n                    .map(ctx => ctx.category)\r\n                    .filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\r\n                    .slice(0, 3);\r\n                  \r\n                  if (similarFoods.length > 0) {\r\n                    responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\r\n                  }\r\n                }\r\n              } else if (data.fallback) {\r\n                responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\r\n              }\r\n              \r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: responseText },\r\n              ]);\r\n              return;\r\n            } catch (err) {\r\n              console.error(\"Food API error:\", err);\r\n              // Continue to Gemini parsing\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Yoga patterns\r\n      if (/yoga|exercise|stretc|workout/i.test(lowerInput)) {\r\n        try {\r\n          const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ type: \"yoga\", userInput: input }),\r\n          });\r\n          const data = await res.json();\r\n          setChat((prev) => [\r\n            ...prev,\r\n            { sender: \"bot\", text: data.response || \"No yoga advice found.\" },\r\n          ]);\r\n          return;\r\n        } catch (err) {\r\n          console.error(\"Yoga API error:\", err);\r\n          // Continue to Gemini parsing\r\n        }\r\n      }\r\n      \r\n      // AQI patterns  \r\n      if (/(?:aqi|air quality|pollution|smog)\\s+(?:in|of|for)\\s+(.+)/i.test(lowerInput)) {\r\n        const cityMatch = input.match(/(?:aqi|air quality|pollution|smog)\\s+(?:in|of|for)\\s+(.+)/i);\r\n        if (cityMatch) {\r\n          const city = cityMatch[1].trim();\r\n          try {\r\n            const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ type: \"aqi\", userInput: city }),\r\n            });\r\n            const data = await res.json();\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: data.response || `No AQI info found for \"${city}\".` },\r\n            ]);\r\n            return;\r\n          } catch (err) {\r\n            console.error(\"AQI API error:\", err);\r\n            // Continue to Gemini parsing\r\n          }\r\n        }\r\n      }\r\n\r\n      // Try Gemini parsing for more complex cases\r\n      const geminiResult = await geminiParseWellnessInput(input);\r\n      \r\n      if (geminiResult) {\r\n        const { intent, weight: geminiWeight, height: geminiHeight, unit, systolic, diastolic, food_item, goal, city } = geminiResult;\r\n\r\n        // --- BMI with Gemini entity extraction ---\r\n        if (intent === \"bmi\") {\r\n          if (geminiWeight && geminiHeight) {\r\n            const bmi = calculateBMI(geminiWeight, geminiHeight, unit || \"metric\");\r\n            const bmiResult = analyzeBMI(bmi);\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: `‚öñÔ∏è Your BMI is **${bmi.toFixed(1)}**\\n${bmiResult.analysis}` },\r\n            ]);\r\n            \r\n            // Check if consultation is needed and redirect\r\n            if (bmiResult.needsConsultation) {\r\n              setTimeout(() => {\r\n                setChat((prev) => [\r\n                  ...prev,\r\n                  { \r\n                    sender: \"bot\", \r\n                    text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for proper medical consultation.\" \r\n                  },\r\n                ]);\r\n                // Redirect to Smart Triage after 2 seconds\r\n                setTimeout(() => {\r\n                  if (onNavigate) {\r\n                    onNavigate('triage');\r\n                  }\r\n                }, 2000);\r\n              }, 1000);\r\n            }\r\n            return;\r\n          } else {\r\n            await handleUserInput({ type: \"bmi\" });\r\n            return;\r\n          }\r\n        }\r\n\r\n        // --- BP with Gemini entity extraction ---\r\n        if (intent === \"bp\") {\r\n          if (systolic && diastolic) {\r\n            const bpResult = analyzeBP(systolic, diastolic);\r\n            setChat((prev) => [\r\n              ...prev,\r\n              {\r\n                sender: \"bot\",\r\n                text: `ü©∫ Your BP: **${systolic}/${diastolic} mmHg** ‚Äî **${bpResult.category}**\\nRisks: ${bpResult.risks.join(\", \")}\\nAdvice: ${bpResult.advice.join(\", \")}`,\r\n              },\r\n            ]);\r\n            \r\n            // Check if consultation is needed and redirect\r\n            if (bpResult.needsConsultation) {\r\n              setTimeout(() => {\r\n                setChat((prev) => [\r\n                  ...prev,\r\n                  { \r\n                    sender: \"bot\", \r\n                    text: \"üè• Let me redirect you to the Smart Triage tab where you can book an appointment with a doctor for immediate medical consultation.\" \r\n                  },\r\n                ]);\r\n                // Redirect to Smart Triage after 2 seconds\r\n                setTimeout(() => {\r\n                  if (onNavigate) {\r\n                    onNavigate('triage');\r\n                  }\r\n                }, 2000);\r\n              }, 1000);\r\n            }\r\n            return;\r\n          } else {\r\n            await handleUserInput({ type: \"bp\" });\r\n            return;\r\n          }\r\n        }\r\n\r\n        // --- Food with Gemini entity extraction ---\r\n        if (intent === \"food\") {\r\n          if (food_item) {\r\n            try {\r\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ type: \"food\", userInput: food_item }),\r\n              });\r\n              const data = await res.json();\r\n              \r\n              // Format response with RAG information\r\n              let responseText = data.response || `No nutrition info found for \"${food_item}\".`;\r\n              \r\n              if (data.ragEnhanced) {\r\n                responseText += `\\n\\nüîç *Enhanced with nutrition database* (${data.contextUsed} sources used)`;\r\n                if (data.relevantContext && data.relevantContext.length > 0) {\r\n                  const similarFoods = data.relevantContext\r\n                    .filter(ctx => ctx.category && ctx.category !== 'unknown')\r\n                    .map(ctx => ctx.category)\r\n                    .filter((cat, index, arr) => arr.indexOf(cat) === index) // unique\r\n                    .slice(0, 3);\r\n                  \r\n                  if (similarFoods.length > 0) {\r\n                    responseText += `\\nüìä Categories: ${similarFoods.join(', ')}`;\r\n                  }\r\n                }\r\n              } else if (data.fallback) {\r\n                responseText += \"\\n\\n‚ö†Ô∏è *Basic analysis* (nutrition database unavailable)\";\r\n              }\r\n              \r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: responseText },\r\n              ]);\r\n            } catch (err) {\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: \"‚ö†Ô∏è Something went wrong. Please try again.\" },\r\n              ]);\r\n            }\r\n            return;\r\n          } else {\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: \"üçé Enter a food item to get nutritional info:\" },\r\n            ]);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // --- Yoga with Gemini entity extraction ---\r\n        if (intent === \"yoga\") {\r\n          if (goal) {\r\n            try {\r\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ type: \"yoga\", userInput: goal }),\r\n              });\r\n              const data = await res.json();\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: data.response || `No yoga advice found for \"${goal}\".` },\r\n              ]);\r\n            } catch (err) {\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: \"‚ö†Ô∏è Something went wrong. Please try again.\" },\r\n              ]);\r\n            }\r\n            return;\r\n          } else {\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: \"üßò Type your health goal (e.g., Yoga for back pain):\" },\r\n            ]);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // --- AQI with Gemini entity extraction ---\r\n        if (intent === \"aqi\") {\r\n          if (city) {\r\n            try {\r\n              const res = await fetch(\"http://localhost:3001/api/ai-response\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ type: \"aqi\", userInput: city }),\r\n              });\r\n              const data = await res.json();\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: data.response || `No AQI info found for \"${city}\".` },\r\n              ]);\r\n            } catch (err) {\r\n              setChat((prev) => [\r\n                ...prev,\r\n                { sender: \"bot\", text: \"‚ö†Ô∏è Something went wrong. Please try again.\" },\r\n              ]);\r\n            }\r\n            return;\r\n          } else {\r\n            setChat((prev) => [\r\n              ...prev,\r\n              { sender: \"bot\", text: \"üå´Ô∏è Enter a city to check AQI:\" },\r\n            ]);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Fallback for unknown or unparsed intent\r\n      setChat((prev) => [\r\n        ...prev,\r\n        {\r\n          sender: \"bot\",\r\n          text: \"ü§î I'm not sure if I understand this. Please try typing something like 'my weight is 70kg height 175cm', 'my BP is 120/80', 'nutrition for apple', 'yoga for back pain', or 'AQI in Delhi'.\",\r\n        },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    // Button click handling (always works)\r\n    if (typeof input === \"object\" && input.type) {\r\n      setBmiStep(0);\r\n      setBpStep(0);\r\n      setWeight(null);\r\n      setPendingTopic(null);\r\n\r\n      if (input.type === \"bmi\") {\r\n        setChat((prev) => [\r\n          ...prev,\r\n          { sender: \"user\", text: \"You chose BMI\" },\r\n          {\r\n            sender: \"bot\",\r\n            text:\r\n              \"Which units?\\n‚Ä¢ Type `kg` for kilograms/cm\\n‚Ä¢ Type `lbs` for pounds/inches\",\r\n          },\r\n        ]);\r\n        setBmiStep(\"choose_unit\");\r\n        return;\r\n      }\r\n      if (input.type === \"bp\") {\r\n        setChat((prev) => [\r\n          ...prev,\r\n          { sender: \"user\", text: \"You chose BP Checker\" },\r\n          {\r\n            sender: \"bot\",\r\n            text: \"Please enter your blood pressure as `systolic/diastolic` (e.g., 120/80)\",\r\n          },\r\n        ]);\r\n        setBpStep(1);\r\n        return;\r\n      }\r\n      if (input.type === \"food\") {\r\n        setChat((prev) => [\r\n          ...prev,\r\n          { sender: \"user\", text: \"You chose Food Nutrition\" },\r\n          { sender: \"bot\", text: \"üçé Enter a food item to get nutritional info:\" },\r\n        ]);\r\n        setPendingTopic(\"food\");\r\n        return;\r\n      }\r\n      if (input.type === \"yoga\") {\r\n        setChat((prev) => [\r\n          ...prev,\r\n          { sender: \"user\", text: \"You chose Yoga\" },\r\n          { sender: \"bot\", text: \"üßò Type your health goal (e.g., Yoga for back pain):\" },\r\n        ]);\r\n        setPendingTopic(\"yoga\");\r\n        return;\r\n      }\r\n      if (input.type === \"aqi\") {\r\n        setChat((prev) => [\r\n          ...prev,\r\n          { sender: \"user\", text: \"You chose AQI\" },\r\n          { sender: \"bot\", text: \"üå´Ô∏è Enter a city to check AQI:\" },\r\n        ]);\r\n        setPendingTopic(\"aqi\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Fallback for unrecognized text input\r\n    if (typeof input === \"string\") {\r\n      setChat((prev) => [\r\n        ...prev,\r\n        {\r\n          sender: \"bot\",\r\n          text: \"ü§î I'm not sure if I understand this. Please choose one of the buttons below to continue.\",\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const calculateBMI = (weight, height, units) => {\r\n    if (units === \"metric\") {\r\n      return weight / ((height / 100) ** 2);\r\n    } else {\r\n      return (weight / (height ** 2)) * 703;\r\n    }\r\n  };\r\n\r\n  const analyzeBMI = (bmi) => {\r\n    if (bmi < 18.5) {\r\n      return {\r\n        analysis: `**Underweight**\\nRisks: Nutritional issues, bone loss\\nAdvice: Eat more protein & carbs, do resistance training.`,\r\n        needsConsultation: false\r\n      };\r\n    } else if (bmi < 25) {\r\n      return {\r\n        analysis: `**Normal**\\nHealthy range.\\nAdvice: Maintain diet & activity.`,\r\n        needsConsultation: false\r\n      };\r\n    } else if (bmi < 30) {\r\n      return {\r\n        analysis: `**Overweight**\\nRisks: Diabetes, heart disease\\nAdvice: Calorie control, cardio exercise.`,\r\n        needsConsultation: false\r\n      };\r\n    } else {\r\n      return {\r\n        analysis: `**Obese**\\nRisks: Stroke, diabetes\\nAdvice: Seek medical guidance, structured weight-loss.\\n\\nüö® **Your BMI indicates obesity. We recommend consulting a doctor immediately.**`,\r\n        needsConsultation: true\r\n      };\r\n    }\r\n  };\r\n\r\n  const analyzeBP = (sys, dia) => {\r\n    let category, risks, advice, needsConsultation = false;\r\n    if (sys < 120 && dia < 80) {\r\n      category = \"Normal\";\r\n      risks = [\"Low risk of cardiovascular issues\"];\r\n      advice = [\"Keep up your healthy habits\"];\r\n    } else if (sys < 130 && dia < 80) {\r\n      category = \"Elevated\";\r\n      risks = [\"Risk of developing hypertension\"];\r\n      advice = [\"Reduce salt\", \"Exercise regularly\"];\r\n    } else if (sys < 140 || dia < 90) {\r\n      category = \"Hypertension Stage 1\";\r\n      risks = [\"Heart disease\", \"Kidney strain\"];\r\n      advice = [\"Limit alcohol\", \"Monitor BP\", \"Consult doctor\"];\r\n    } else if (sys < 180 && dia < 120) {\r\n      category = \"Stage 2 Hypertension\";\r\n      risks = [\"Organ damage\", \"Stroke\"];\r\n      advice = [\"Medication likely\", \"Medical supervision\"];\r\n      needsConsultation = true;\r\n    } else {\r\n      category = \"Hypertensive Crisis\";\r\n      risks = [\"Emergency: stroke/heart failure\"];\r\n      advice = [\"Seek immediate medical help\"];\r\n      needsConsultation = true;\r\n    }\r\n    \r\n    if (needsConsultation) {\r\n      advice.push(\"üö® **Your blood pressure is in a dangerous range. We recommend consulting a doctor immediately.**\");\r\n    }\r\n    \r\n    return { category, risks, advice, needsConsultation };\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-3xl mx-auto flex flex-col h-screen\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Wellness Chat</h2>\r\n      <div className=\"flex-grow overflow-auto border rounded-md p-3 bg-gray-50 shadow-inner\">\r\n        <ChatWindow\r\n          messages={chat}\r\n          buttons={buttons}\r\n          onUserInput={handleUserInput}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WellnessChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}